@startuml

title "Use Case - Plan Task"

-> ":Controller" : getStartingsTimes(TaskWrapper)
activate ":Controller"

":Controller" -> ":BranchOfficeManager": getCurrentBranchOffice()
activate ":BranchOfficeManager"
":Controller" <-- ":BranchOfficeManager": BranchOffice
deactivate ":BranchOfficeManager"

":Controller" -> ":BranchOffice": getResourceManager()
activate ":BranchOffice"
":Controller" <-- ":BranchOffice": ResourceManager
deactivate ":BranchOffice"

":Controller" -> ":Task": getPlan()
activate ":Task"
":Controller" <-- ":Task": Plan
deactivate ":Task"

":Controller" -> ":Task": getEstimatedDuration()
activate ":Task"
":Controller" <-- ":Task": long
deactivate ":Task"

":Controller" -> ":Clock": getTime()
activate ":Clock"
":Controller" <-- ":Clock": LocalDateTime
deactivate ":Clock"

":Controller" -> ":ResourceManager" : getStartingTimes(Plan, long, LocalDateTime)
activate ":ResourceManager"

":ResourceManager" -> ":Plan": getRequirements()
activate ":Plan"
":Plan" --> ":ResourceManager" : Map<ResourceType, Integer>
deactivate ":Plan"

loop over resource types

    ":ResourceManager" -> ":ResourceType" : getNbofResources()
    activate ":ResourceType"
    ":ResourceType" --> ":ResourceManager" : int
    deactivate ":ResourceType"

end

loop over resource types

    ":ResourceManager" -> ":ResourceType" : getAvailabilityPeriod(int)
    activate ":ResourceType"


    ":ResourceType" --> ":ResourceManager" : AvailabilityPeriod
    deactivate ":ResourceType"

end

":ResourceManager" --> ":Controller" : Iterator<LocalDateTime>
deactivate ":ResourceManager"

loop i = 1; i <= 3 && hasNext() ; i++
    <-- ":Controller" : LocalDateTime
end
deactivate ":Controller"

-> ":Controller" : initializePlan(TaskWrapper, LocalDateTime)
activate ":Controller"

":Controller" -> ":Task" : initializePlan(LocalDateTime)
activate ":Task"

":Task" -> ":TaskStateUnavailable" : initializePlan(LocalDateTime)
activate ":TaskStateUnavailable"

":TaskStateUnavailable" -> ":Task": getEstimatedDuration()
activate ":Task"
":TaskStateUnavailable" <-- ":Task": long
deactivate ":Task"

":TaskStateUnavailable" -> ":Plan" : initializePlan(long, LocalDateTime)
activate ":Plan"

":Plan" -> ":TimeSpan": TimeSpan(LocalDateTime, LocalDateTime)
activate ":TimeSpan"
":Plan" <-- ":TimeSpan": TimeSpan
deactivate ":TimeSpan"

loop over resource types
    ":Plan" -> ":ResourceType" : getAvailableResources(TimeSpan)
    activate ":Plan"
    ":ResourceType" --> ":Plan" : List<Resource>
    deactivate ":Plan"
end

loop over resources
    ":Plan" -> ":Reservation" : Reservation(Resource, LocalDateTime, LocalDateTime)
    activate ":Reservation"
    ":Reservation" --> ":Plan" : Resource
    deactivate ":Reservation"
end

deactivate ":Plan"
deactivate ":TaskStateUnavailable"
deactivate ":Task"
deactivate ":Controller"


-> ":Controller" : getPlannedResources(Task)
activate ":Controller"

":Controller" -> ":Task" : getPlannedResources()
activate ":Task"

":Task" -> ":TaskStatePlanned" : getPlannedResources(Task)
activate ":TaskStatePlanned"

":TaskStatePlanned" -> ":Task": getPlan()
activate ":Task"
":TaskState" <-- ":Task": Plan
deactivate ":Task"

":TaskStatePlanned" -> ":Plan" : getPlannedResources()
activate ":Plan"

loop over reservations
    ":Plan" -> ":Reservation" : getResource()
    activate ":Reservation"
    ":Reservation" --> ":Plan" : Resource
    deactivate ":Reservation"

end

":Plan" --> ":TaskStatePlanned" : List<Resource>
deactivate ":Plan"
":TaskStatePlanned" --> "Task" : List<Resource>
deactivate ":TaskStatePlanned"
":Task" --> ":Controller" : List<Resource>
deactivate ":Task"
<-- ":Controller": List<ResourceWrapper>
deactivate ":Controller"


-> ":Controller": getAlternativeResources(TaskWrapper, ResourceWrapper)
activate ":Controller"

":Controller" -> ":Task" : getAlternativeResources(Resource)
activate ":Task"

":Task" -> ":TaskStatePlanned" : getAlternativeResources(Task, Resource)
activate ":TaskStatePlanned"

":TaskStatePlanned" -> ":ResourceManager" : getAlternativeResources(TimeSpan)
activate ":ResourceManager"

":ResourceManager" -> ":ResourceType": getAvailableResources(TimeSpan)
activate ":ResourceType"

":ResourceManager" <-- ":ResourceType": List<Resource>
deactivate ":ResourceType"

":TaskStatePlanned" <-- ":ResourceManager" : List<Resource>
deactivate ":ResourceManager"

":Task" <-- ":TaskStatePlanned" : List<Resource>
deactivate ":TaskStatePlanned"

":Controller" -> ":Task" : List<Resource>
deactivate ":Task"

<-- ":Controller": List<ResourceWrapper>
deactivate ":Controller"



-> ":Controller" : changeResource(TaskWrapper, ResourceWrapper, ResourceWrapper)
activate ":Controller"

":Controller" -> ":Task" : changeResource(Resource, Resource)
activate ":Task"

":Task" -> ":TaskStatePlanned" : changeResource(Task, Resource, Resource)
activate ":TaskStatePlanned"

":TaskStatePlanned" -> ":Plan" : changeResource(Resource, Resource)
activate ":Plan"

loop over reservations
    ":Plan" -> ":Plan" : removeReservation(Reservation)
    activate ":Plan"
    ":Plan" -> ":Plan" : deleteReservation(Reservation)
    deactivate ":Plan"
end

deactivate ":Plan"
deactivate ":TaskStatePlanned"
deactivate ":Task"
deactivate ":Controller"

@enduml
