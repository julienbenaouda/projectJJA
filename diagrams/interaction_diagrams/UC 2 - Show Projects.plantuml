@startuml

title "Use Case - Show Projects"

-> ":Controller": getProjects()
activate ":Controller"

":Controller" -> ":BranchOfficeManager": getCurrentBranchOffice()
activate ":BranchOfficeManager"
":Controller" <-- ":BranchOfficeManager": BranchOffice
deactivate ":BranchOfficeManager"

":Controller" -> ":BranchOffice": getUserManager()
activate ":BranchOffice"
":Controller" <-- ":BranchOffice": UserManager
deactivate ":BranchOffice"

":Controller" -> ":UserManager": getCurrentUser()
activate ":UserManager"
":Controller" <-- ":UserManager": User
deactivate ":UserManager"

":Controller" -> ":BranchOffice": getProjectManager()
activate ":BranchOffice"
":Controller" <-- ":BranchOffice": ProjectManager
deactivate ":BranchOffice"

":Controller" -> ":ProjectManager" : getProjects(User)
activate ":ProjectManager"

loop over projects
    ":ProjectManager" -> ":Project" : hasAccessTo(User)
    activate ":Project"

    loop over tasks
        ":Project" -> ":Task" : hasAccessTo(User)
        activate ":Task"

        ":Task" -> ":Plan" : isDeveloperFromPlan(User)
        activate ":Plan"

        ":Plan" --> ":Task" : boolean
        deactivate ":Plan"

        ":Task" --> ":Project" : boolean
        deactivate ":Task"

    end

    ":Project" --> ":ProjectManager" : boolean
    deactivate ":Project"
end

":ProjectManager" --> ":Controller" : List<Project>
deactivate ":ProjectManager"

<-- ":Controller" : List<ProjectWrapper>
deactivate ":Controller"




-> ":Controller": getTasks(ProjectWrapper)
activate ":Controller"

":Controller" -> ":BranchOfficeManager": getCurrentBranchOffice()
activate ":BranchOfficeManager"
":Controller" <-- ":BranchOfficeManager": BranchOffice
deactivate ":BranchOfficeManager"

":Controller" -> ":BranchOffice": getUserManager()
activate ":BranchOffice"
":Controller" <-- ":BranchOffice": UserManager
deactivate ":BranchOffice"

":Controller" -> ":UserManager": getCurrentUser()
activate ":UserManager"
":Controller" <-- ":UserManager": User
deactivate ":UserManager"

":Controller" -> ":Project" : getTasks(User)
activate ":Project"
loop over tasks
    ":Project" -> ":Task" : hasAccessTo(User)
    activate ":Task"


    ":Task" --> ":Project" : boolean
    deactivate ":Task"

end

":Project" --> ":Controller" : List<Task>
deactivate ":Project"

<-- ":Controller" : List<TaskWrapper>
deactivate ":Controller"


@enduml
