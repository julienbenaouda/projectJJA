@startuml

title "Plan Task - Plan"

-> ":Controller": plan(...)
activate ":Controller"

":Controller" -> ":Task": plan(List<Resource>, LocalDateTime, ResourceManager, User)
activate ":Task"

":Task" -> ":Task": getState()
activate ":Task"

":Task" --> ":Task": TaskState
deactivate ":Task"

":Task" -> ":TaskState": plan(Task, List<Resource>, LocalDateTime, ResourceManager)
activate ":TaskState"

":TaskState" -> ":ResourceManager": plan(Task, List<Resource>, LocalDateTime)
activate ":ResourceManager"

":ResourceManager" -> ":Task": getRequirements()
activate ":Task"
":Task" --> ":ResourceManager": Map<ResourceType, Integer>
deactivate ":Task"

":ResourceManager" -> ":Task": getDuration()
activate ":Task"
":Task" --> ":ResourceManager": long
deactivate ":Task"

":ResourceManager" -> ":ResourceManager": checkRequirements(Map<ResourceType, Integer>)
activate ":ResourceManager"

":ResourceManager" --> ":ResourceManager": boolean
deactivate ":ResourceManager"

loop over resource types

":ResourceManager" -> ":ResourceType": getAvailableResources(TimeSpan)
activate ":ResourceType"

loop
    ":ResourceType" -> ":AvailabilityPeriod": overlaps(TimeSpan)
    activate ":AvailabilityPeriod"

    ":AvailabilityPeriod" --> ":ResourceType": boolean
    deactivate ":AvailabilityPeriod"
end

loop over resources

    ":ResourceType" -> ":Resource": isAvailable(TimeSpan)
    activate ":Resource"

    loop
        ":Resource" -> ":TimeSpan": overlaps(TimeSpan)
        activate ":TimeSpan"

        ":TimeSpan" --> ":Resource": boolean
        deactivate ":TimeSpan"
    end

    ":Resource" --> ":ResourceType": boolean
    deactivate ":Resource"

end

":ResourceType" --> ":ResourceManager": Iterator<Resource>
deactivate ":ResourceType"

end

loop over resources

":ResourceManager" -> ":Resource": createReservation(Task, TimeSpan)
activate ":Resource"

":Resource" -> ":Reservation": Reservation(Task, TimeSpan)
activate ":Reservation"
deactivate ":Reservation"

deactivate ":Resource"

end

deactivate ":ResourceManager"

":TaskState" -> ":Task": setState(TaskStatePlanned)
deactivate ":TaskState"

deactivate ":Controller"

@enduml
