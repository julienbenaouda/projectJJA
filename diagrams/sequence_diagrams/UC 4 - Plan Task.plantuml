@startuml

title "Use Case - Plan Task"

-> ":Controller": getProjects()
activate ":Controller"


":Controller" -> ":ProjectOrganizer" : getProjects(User)
activate ":ProjectOrganizer"

loop over projects
    ":ProjectOrganizer" -> ":Project" : hasAccessTo(User)
    activate ":Project"

    loop over tasks
        ":Project" -> ":Task" : hasAccessTo(User)
        activate ":Task"

        ":Task" -> ":Plan" : isDeveloperFromPlan(User)
        activate ":Plan"

        ":Plan" --> ":Task" : boolean
        deactivate ":Plan"

        ":Task" --> ":Project" : boolean
        deactivate ":Task"

    end

    ":Project" --> ":ProjectOrganizer" : boolean
    deactivate ":Project"
end

":ProjectOrganizer" --> ":Controller" : List<ProjectWrapper>
deactivate ":ProjectOrganizer"


loop over projects
    ":Controller" -> ":Project" : getTasks(User)
    activate ":Project"

    loop over tasks
        ":Project" -> ":Task" : hasAccessTo(User)
        activate ":Task"

        ":Task" -> ":Plan" : isDeveloperFromPlan(User)
        activate ":Plan"

        ":Plan" --> ":Task" : boolean
        deactivate ":Plan"

        ":Task" --> ":Project" : boolean
        deactivate ":Task"

    end

    ":Project" --> ":Controller" : List<ProjectWrapper>
    deactivate ":Project"

    loop over tasks
        ":Controller" -> ":Task" : canBePlanned()
        activate ":Task"

        ":Task" -> ":TaskState" : canBePlanned()
        activate ":TaskState"

        ":TaskState" --> ":Task" : boolean
        deactivate ":TaskState"

        ":Task" --> ":Controller" : boolean
        deactivate ":Task"

    end
end

-> ":Controller" : getStartingsTimes(TaskWrapper)
":Controller" -> ":ResourceManager" : getStartingTimes(Plan long LocalDateTime)
activate ":ResourceManager"

":ResourceManager" -> ":Plan": getRequirements()
activate ":Plan"
":Plan" --> ":ResourceManager" : Map<ResourceType, Integer>
deactivate ":Plan"

loop over resource types

    ":ResourceManager" -> ":ResourceType" : getNbofResources()
    activate ":ResourceType"
    ":ResourceType" --> ":ResourceManager" : int
    deactivate ":ResourceType"

end

loop over resource types

    ":ResourceManager" -> ":ResourceType" : getAvailabilityPeriod(int)
    activate ":ResourceType"


    ":ResourceType" --> ":ResourceManager" : AvailabilityPeriod
    deactivate ":ResourceType"

end

":ResourceManager" --> ":Controller" : Iterator<LocalDateTime>
deactivate ":ResourceManager"

loop i = 1; i <= 3 && hasNext() ; i++
    <-- ":Controller" : LocalDateTime
end

-> ":Controller" : initializePlan(TaskWrapper, LocalDateTime)
":Controller" -> ":Task" : initializePlan(ResourceManager, LocalDateTime)
activate ":Task"
":Task" -> ":TaskState" : initializePlan(ResourceManager, LocalDateTime)
activate ":TaskState"
":TaskState" -> ":ResourceManager" : initializePlan(Plan, long, LocalDateTime)
":ResourceManager" -> ":Plan" : getRequirements()
activate ":Plan"
":Plan" --> ":ResourceManager" : Map<ResourceType, Integer>
deactivate ":Plan"

loop over resource types
    ":ResourceManager" -> ":ResourceType" : getAvailableResources(TimeSpan)
    activate ":ResourceType"

    ":ResourceType" --> ":ResourceManager" : List<Resource>
    deactivate ":ResourceType"
end

":ResourceManager" -> ":Plan" : createReservations(List<Resource>, LocalDateTime)
activate ":Plan"
loop over resources
    ":Plan" -> ":Reservation" : new Reservation(Resource, LocalDateTime, LocalDateTime)
    activate ":Reservation"
    ":Reservation" --> ":Plan" : Resource
end
deactivate ":Plan"


-> ":Controller" : getPlannedResources(Task)
":Controller" -> ":Task" : getPlannedResources()
activate ":Task"
":Task" -> ":TaskState" : getPlannedResources(Task)
activate ":TaskState"
":TaskState" -> ":Task": getPlan()
activate ":Task"
":Task" --> ":TaskState" : Plan
deactivate ":Task"
":TaskState" -> ":Plan" : getPlannedResources()
activate ":Plan"

loop over reservations
    ":Plan" -> ":Reservation" : getResource()
    activate ":Reservation"
    ":Reservation" --> ":Plan" : Resource
    deactivate ":Reservation"

end

":Plan" --> ":TaskState" : List<Resource>
deactivate ":Plan"
":TaskState" --> "Task" : List<Resource>
deactivate ":TaskState"
":Task" --> ":Controller" : List<Resource>
deactivate ":Task"

-> ":Controller": getAlternativeResources(TaskWrapper, ResourceWrapper)
loop over resources
    ":Controller" -> ":Task" : getAlternativeResources(ResourceManager, Resource)
    activate ":Task"
    ":Task" -> ":TaskState" : getAlternativeResources(ResourceManager, Task, Resource)
    activate ":TaskState"
    ":TaskState" -> ":ResourceManager" : getAlternativeResources(Resource, TimeSpan)
    activate ":ResourceManager"
    ":ResourceManager" -> ":Resource" : getType()
    activate ":Resource"
    ":Resource" --> ":ResourceManager" : ResourceType
    deactivate ":Resource"
    ":ResourceManager" -> ":ResourceType" : getAvailableResources(TimeSpan)
    ":ResourceType" --> ":ResourceManager" : List<Resource>
    deactivate ":ResourceType"
    ":ResourceManager" --> ":TaskState" : List<Resource>
    deactivate ":ResourceManager"
    ":TaskState" --> ":Task" : List<Resource>
    deactivate ":TaskState"
    ":Task" --> ":Controller" : List<Resource>
    deactivate ":Task"
end
<-- ":Controller": List<ResourceWrapper>

-> ":Controller" : changeResource(TaskWrapper, ResourceWrapper, ResourceWrapper)
":Controller" -> ":Task" : changeResource(Resource, Resource)
activate ":Task"
":Task" -> ":TaskState" : changeResource(Task, Resource, Resource)
activate ":TaskState"
":TaskState" -> ":Task": getPlan()
activate ":Task"
":Task" --> ":TaskState" : Plan
deactivate ":Task"
":TaskState" -> ":Plan" : changeResource(Resource, Resource)
activate ":Plan"

loop over reservations
    ":Plan" -> ":Plan" : removeReservation(Reservation)
    ":Plan" -> ":Plan" : deleteReservation(Reservation)
end

deactivate ":Plan"
deactivate ":TaskState"
deactivate ":Task"


":TaskState" -> "Task" : setState(new TaskStatePlanned)
deactivate ":TaskState"
deactivate ":Task"


<-- ":Controller" : Iterator<LocalDateTime>

deactivate ":Controller"

@enduml
