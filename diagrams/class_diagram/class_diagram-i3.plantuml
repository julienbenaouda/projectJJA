@startuml

title __TASKMAN's Class Diagram__\n

  package taskman {
    class Initiator {
        {static} + void main(String[])
    }

    package taskman.frontend {
      interface MethodCall {
          {abstract} + void call()
      }

      class UserInterface {
          + UserInterface(Controller)
          + void start()
          - void startMenu()
          - void login()
          - void showUsers()
          - void createUser()
          - removeUser()
          - void importFromFile()
          - void exportToFile()
          - void loggedInMenu()
          - void showProjectsAndTasks()
          - void createProject()
          - void createTask()
          - void planTask()
          - void updateTaskStatus()
          - void addAlternativeToTask()
          - void addDependencyToTask()
          - void createResourceType()
          - void createConstraint()
          - void createResource()
          - void showTime()
          - void advanceTime()
          - ProjectWrapper void selectProject(boolean, String)
          - TaskWrapper selectTask(boolean, String, ProjectWrapper)
          - void simulationMenu()
          - void cancelSimulation()
          - void executeSimulation()
      }

      package taskman.frontend.sections {
        class Cancel {
        }

        class FormSection {
            - withCancel : Boolean
            - questions : List<String>
            - answers : List<String>
            + FormSection(boolean, String ...)
            + void show()
            + boolean hasAnswers()
            + String getAnswer(int)
            - void resetAnswers()
        }

        class MenuSection {
            - selectionSection : SelectionSection<MethodCall>
            + MenuSection()
            + MenuSection(String)
            + void addOption(String, MethodCall)
            + void show()
            + void executeChoice()
        }

        abstract class Section {
            {abstract} + void show()
            ~ void print()
            ~ void println()
            ~ String inputString()
            ~ String inputAnswer(String)
            ~ String inputValidAnswer(String, Collection<String>)
        }

        class SelectionSection {
            - withCancel : Boolean
            - cancelText : String
            - optionNames : List<String>
            - optionObjects : List<Type>
            - answer : Integer
            + SelectionSection(boolean)
            + SelectionSection(boolean, String)
            + void addOption(String)
            + void addOption(String, Type)
            + void addOptions(Collection<String>)
            + void addOptions(List<String>, List<Type>)
            + void addOptions(Map<String, Type<)
            + void show()
            + Boolean hasAnswer()
            + StringgetAnswer()
            + Type getAnswerObject()
            + void resetAnswer()
        }

        class TextSection {
            - text : String
            - isBlocking : boolean
            + TextSection(String, boolean)
            + void addLine(String)
            + void show()
        }

        class TitleSection {
            + TitleSection(String)
            - String repeat(char, int)
            + void show()
        }
      }
    }

    package taskman.backend {
      class Controller {
          + Controller(Clock, BranchOfficeManager, SimulationManager)
          + createBranchOffice(String)
          + LocalDateTime getTime()
          + void updateTime(LocalDateTime)
          + UserWrapper getCurrentUser()
          + List<UserWrapper> getUsers(BranchOfficeWrapper)
          + Collection<String> getUserTypes()
          + void createUser(BranchOfficeWrapper, String, String, String, LocalTime)
          + void removeUser(BranchOfficeWrapper, UserWrapper, String)
          + void login(BranchOffice, String, String)
          + void logout()
          + List<ProjectWrapper> getProjects()
          + String getProjectStatus(ProjectWrapper)
          + void createProject(String, String, LocalDateTime)
          + List<TaskWrapper> getTasks(ProjectWrapper)
          + void createTask(ProjectWrapper, String, String, long, double, Map<ResourceTypeWrapper, Integer>)
          + Iterator<LocalDateTIme> getStartingsTimes(TaskWrapper)
          + void initializePlan(TaskWrapper, LocalDateTime)
          + List<ResourceWrapper> getPlannedResources(TaskWrapper)
          + List<ResourceWrapper> getAlternativeResources(TaskWrapper, ResourceWrapper)
          + void changeResource(TaskWrapper, ResourceWrapper, resourceWrapper)
          + void cancelPlan(TaskWrapper)
          + List<ResourceTypeWrapper> getResourceTypes()
          + void createResourceType(String)
          + void createConstraint(String)
          + void createResource(ResourceTypeWrapper, String)
          + void addAlternativeToTask(TaskWrapper, TaskWrapper)
          + void addDependencyToTask(TaskWrapper, TaskWrapper)
          + void addRequirementToTask(TaskWrapper, ResourceTypeWrapper, int)
          + void endTaskExecution(TaskWrapper, LocalDateTime, LocalDateTime, String)
          + void makeExecuting(TaskWrapper)
          + void exportSystem(String)
          + void importSystem(String)
          + void startSimulation()
          + void cancelSimulation()
          + void executeSimulation()
          - void setClock(Clock)
          - UserManager getCurrentUserManager()
          - ProjectManager getCurrentProjectManager()
          - ResourceManager getCurrentResourceManager()
          + BranchOfficeManager getBranchOfficeManager()
          - void setBranchOfficeManager(BranchOfficeManager)
          + List<BranchOfficeWrapper> getBranchOffices()
          + delegateTask(TaskWrapper, BranchOfficeWrapper)
      }

      package taskman.backend.wrappers {
        interface AvailabilityPeriodWrapper {
            {abstract} + LocalDateTime getStartTime()
            {abstract} + LocalDateTime getEndTime()
        }

        interface ProjectWrapper {
            {abstract} + String getName()
            {abstract} + String getDescription()
            {abstract} + LocalDateTime getCreationTime()
            {abstract} + LocalDateTime getDueTime()
        }

        interface ResourceTypeWrapper {
            {abstract} + String getName()
            {abstract} + Lisst<ResourceWrapper> getResources()
        }

        interface ResourceWrapper {
            {abstract} + String getName()
            {abstract} + ResourceTypeWrapper getType()
        }

        interface TaskWrapper {
            {abstract} + String getName()
            {abstract} + String getDescription()
            {abstract} + long getEstimatedDuration()
            {abstract} + double getAcceptableDeviation()
            {abstract} + String getStatus()
            {abstract} + boolean canBePlanned()
            {abstract} + boolean canBeUpdated()
            {abstract} + long getDelay()
            {abstract} + TaskWrapper getAlternative()
            {abstract} + TaskWrapper getDependencies()
        }

        interface TimeSpanWrapper {
            {abstract} + LocalDateTime getStartTime()
            {abstract} + LocalDateTime getEndTime()
        }

        interface UserWrapper {
            {abstract} + String getName()
            {abstract} + String getUserType()
        }
      }

      package taskman.backend.importexport {
        class ImportExportException {
            + ImportExportException(String)
        }

        class XmlObject {
            - xstream : XStream
            + XmlObject(ProjectManager, UserManager, ResourceManager, Clock)
            + ResourceManager getResourceManager()
            + UserManager getUserManager()
            + ProjectManager getProjectManager()
            + Clock getClock()
            {static} - XStream createXstream()
            + String toXMLString()
            {static} + XmlObject fromXMLString(String)
            + void saveToFile(String)
            {static} + XmlObject restoreFromFile(String)
        }
      }

      package taskman.backend.project {
        class Project {
            - taskList : ArrayList<Task>
            - name : String
            - description : String
            - creationTime : LocalDateTime
            - dueTime : LocalDateTime
            + Project(String, String, LocalDateTime, LocalDateTIme, User)
            # Project(String, String, LocalDateTime, LocalDateTIme)
            + Lisst<Task> getTasks(User)
            + List<Task> getTasks()
            + Task getTask(String)
            + void createTask(String, String, long, double, User)
            - void addTask(Task)
            - void removeTask(Task)
            + boolean hasAccessTo(User)
            + StringgetName()
            - void setName(String)
            + String getDescription()
            - void setDescription(String)
            + LocalDateTIme getCreationTime()
            - void setCreationTime(LocalDateTIme)
            + LocalDateTime getDueTime()
            - void setDueTime(LocalDateTime)
            + String getStatus(LocalDateTIme)
        }

        class ProjectManager {
            - projects : Collection<Project>
            + ProjectManager()
            + List<Project> getProjects()
            + List<Project> getProjects(User)
            + Project getProject(String)
            + void createProject(String, String, LocalDateTime, LocalDateTIme, uUser)
            - boolean projectExists(String)
        }
      }

      package taskman.backend.constraint {
        class ConstraintParser {
            [static] Constraint parse(String, ResourceManager)
        }
      }

      package taskman.backend.constraint.amount {
        interface Amount {
            + {abstract} int evaluate(Map<ResourceType, Integer>)
        }

        class Constant {
            - constant: int
            + constant(int)
            + int evaluate(Map<ResourceType, Integer>)
        }

        class Minus {
            + Minus(Amount, Amount)
            + int evaluate(Map<ResourceType, Integer>)            
        }

        class Plus {
            + Plus(Amount, Amount)
            + int evaluate(Map<ResourceType, Integer>)            
        }

        class Type {
            + Type(ResourceType)
            + int evaluate(Map<ResourceType, Integer>)            
        }
      }

      package taskman.backend.constraint.constraint {

        class Smaller {
            + Smaller(Amount, Amount)
            + boolean evaluate(Map<ResourceType, Integer>)
        }

        class Equals {
            + Equals(Amount, Amount)
            + boolean evaluate(Map<ResourceType, Integer>)
        }

        interface Constraint {
            {abstract} + boolean evaluate(Map<ResourceType, Integer>)
        }

        class Not {
            + Not(Constraint)
            + boolean evaluate(Map<ResourceType, Integer>)
        }

        class Or {
            + Or(Constraint, Constraint)
            + boolean evaluate(Map<ResourceType, Integer>)
        }
      }

      package taskman.backend.resource {

        class DeveloperResource {
            + DeveloperResource(String, ResourceType, LocalTime, Developer)
            + LocalTime getBreakTime()
            - void setBreakTime(AvailabilityPeriod)
            + void addBreakTime(LocalTIme)
            + boolean isAvailable(TimeSpan)
            - boolean overlapsWithBreak(TimeSpan)
            - void setDeveloper(Developer)
            + Developer getDeveloper()
        }

        class Plan {
            - requirements : Map<ResourceType, Integer>
            - reservations : List<Reservation>
            + Plan(Task)
            + Task getTask()
            - void setTask(Task)
            + Map<ResourceType, Integer> getRequirements()
            + void addRequirement(ResourceType, int)
            + List<Reservation> getReservations()
            + void createReservation(Resource, LocalDateTime, LocalDateTime)
            + void createReservations(Lisst<Resource>, LocalDateTIme)
            + void createSpecificReservation(Resource, LocalDateTIme, LocalDateTime)
            + void removeReservation(Reservation)
            + List<Resource> getPlannedResources()
            + void changeResource(Resource, Resource)
            + Boolean isDeveloperFromPlan(User)
            + void finish(LocalDateTime)
            + void emptyPlan()
            # boolean isAvailableStartingTime(long, LocalDateTime)
            + boolean canBeRescheduled(TimeSpan)
            + Map<ResourceType, Integer> cloneRequirements()
            + void initializePlan(long, LocalDateTime)
            + void reschedulePlan(TimeSpan)
        }

        class Reservation {
            - userSpecific : boolean
            + Reservation(Resource, LocalDateTIme, LocalDateTIme)
            + Resource getResource()
            - void setResource(Resource)
            + TimeSpan getTimeSpan()
            - setTimeSpan(TimeSpan)
            + boolean overlaps(TimeSpan)
            + void finishEarlier(LocalDateTime)
            + boolean isUserSpecific()
            + void setUserSpecific()
            + void delete()
        }

        class Resource {
            - name : String
            - reservations : ArrayList<Reservation>
            + Resource(String, ResourceType)
            + String getName()
            + ResourceType getType()
            + setType(ResourceType)
            + List<Reservation> getReservations()
            + void addReservation(Reservation)
            + void deleteReservation(Reservation)
            + boolean isAvailable(TimeSpan)
            + boolean canRemove()
            + List<Resource> getAlternativeResources(TimeSpan)
        }

        class ResourceManager {
            - resourceTypes : Set<ResourceType>
            - constraints : List<Constraint>
            + ResourceManager()
            + ResourceType getResourceType(String)
            + List<ResourceType> getResourceTypes()
            + void createResourceType(String)
            - List<Constraint> getConstraint()
            - void addConstraint(Constraint)
            + void createConstraint(String)
            + Iterator<LocalDateTime> getStartingTimes(plan, long, LocalDateTIme)
            - boolean checkRequirements(Map<ResourceType, Integer)
            + void createResourceForUser(User, LocalTime)
            + void removeResourceForUser(User)
            + void addRequirement(Plan, ResourceType, int)
        }

        class ResourceType {
            - name : String
            - availability : HashMap<Integer, AvailabilityPeriod>
            - resources : ArrayList<Resource>
            + ResourceType(String)
            + String getName()
            - void setName(String)
            - Map<Integer, AvailabilityPeriod> getAvailability()
            + AvailabilityPeriod getAvailabilityPeriod(int)
            + List<Resource> getResources()
            + int getNbOfResources()
            + boolean hasResource(String)
            + Resource getResource(String)
            - void addResource(Resource)
            + void createResource(String)
            + void createResourceFromUser(String, LocalTime, Developer)
            + void removeResource(Resource)
            + boolean hasAvailableResources(TimeSpan, int)
            + List<Resource> getAvailableResources(TimeSpan)
            + void addAvailability(int, AvailabilityPeriod)
            + void clone()
            + boolean equals(object)
            + int hashCode()
        }
      }

      package taskman.backend.simulation {
        class SimulationManager {
            - previousState : String
            + SimulationManager()
            - String getPreviousState()
            - void setPreviousState(String)
            + void startSimulation(ProjectManager, UserManager, ResourceManager, Clock, User)
            + XmlObject cancelSimulation()
            + void executeSimulation()
        }
      }

      package taskman.backend.task {
        class Task {
            - name : String
            - description : String
            - estimatedDuration : long
            - acceptableDeviation : double
            - dependencies : ArrayList<Task>
            + Task(String, String, long, double)
            + String getName()
            - void setName(String)
            + String getDescription()
            - void setDescription(String)
            + long getEstimatedDuration()
            - void setEstimatedDuration(long)
            + double getAcceptableDeviation()
            - void setAcceptableDeviation(double)
            + TimeSpan getTimeSpan()
            # void setTimeSpan(TimeSpan)
            - void setTimeSpan(LocalDateTime, LocalDAteTime)
            + TaskState getState()
            # void setState(TaskSTate)
            + String getStatus()
            + boolean canBePlanned()
            + boolean canBeUpdated()
            + void endExecution(LocalDateTime, LocalDateTime, String, User)
            + void makeExecuting(ResourceManager, LocalDateTime, User)
            + boolean isAvailable(LocalDateTime)
            + boolean isFinished()
            # boolean isFailed()
            + long getDelay()
            + Task getAlternative()
            # void setAlternativeTask(Task)
            + void setAlternative(Task)
            + List<Task> getDependencies()
            # void addDependencyTask(Task)
            + void addDependency(Task)
            + void removeDependency(TAsk)
            + Plan getPlan()
            + void initializePlan(LocalDateTime)
            + List<Resource> getPlannedResources()
            + List<Resource> getAlternativeResources(Resource)
            + void changeResource(Resource, Resource)
            + void cancelPlan()
            + void addRequirement(ResourceManager, ResourceType, int)
            + void delegate(BranchOffice, LocalDateTime)
            {static} # boolean containsLoop(Task, Task)
            + boolean hasAccessTo(User)
        }

        class DelegatedTask {
            + DelegatedTask(String, String, long, double)
            + void addDependency(Task)
            + void removeDependency(Task)
            + void setAlternative(Task)
        }

        abstract class TaskState {
            - status : String
            + String getStatus()
            # void setStatus(String)
            + boolean canBePlanned()
            + boolean canBeUpdated()
            + long getDelay()
            + void execute(Task, ResourceManager, LocalDateTime)
            + void endExecution(TAsk, LocalDateTime, LocalDateTime)
            + void setAlternative(Task, Task)
            + void addDependency(Task, Task)
            + void addRequirement(ResourceManager, TAsk, ResourceType, int)
            + boolean isAvailable(Task, LocalDateTime)
            + boolean isFinished()
            # boolean isFailed()
            + void initializePlan(Task, LocalDateTIme)
            + List<Resource> getPlannedResources(Task)
            + List<Resources> getAlternativeResources(Task, Resource)
            + void changeResource(TAsk, REsource, REsource)
            + void cancelPlan(Task)
            + delegate(BranchOffice, Task, LocalDateTime)
        }

        class TaskStateDelegated {
            + String getStatus()
            - getDelegatedTask()
            - setDelegatedTask()
            + void setAlternative(Task, Task)
            # boolean isFailed()
        }

        class TaskStateExecuting {
            + TaskStateExecuting()
            + void endExecution(Task, LocalDateTime, LocalDateTime, String)
        }

        class TaskStateFailed {
            + TaskStateFailed()
            + void setAlternative(Task, Task)
            # boolean isFailed()
        }

        class TaskStateFinished {
            + TaskStateFinished()
            + boolean isFinished()
            + long getDelay(Task)
        }

        class TaskStatePlanned {
            + TaskStatePlanned()
            + boolean canBeUpdated()
            + List<Resource> getPlannedResources(Task)
            + List<Resource> getAlternativeResources(Task, Resource)
            + void changeResource(Task, Resource, REsource)
            + void cancelPlan(Task)
            + void execute(Task, ResourceManager, LocalDateTime)
            + boolean isAvailable(Task, LocalDateTime)
        }

        class TaskStateUnavailable {
            + TaskStateUnavailable()
            + addDependency(Task, Task)
            + boolean canBePlanned()
            + void addRequirement(ResourceManager, Task, ResourceType, int)
            + void initializePlan(Task, LocalDateTime)
            + void delegate(BranchOffice, Task, LocalDateTime)
        }
      }

      package taskman.backend.time {
        class AvailabilityPeriod {
            - startTime : LocalTime
            - endTime : LocalTime
            + AvailabilityPeriod(LocalDateTime, LocalDateTime)
            + LocalDateTime getStartTime()
            - void setStartTime(LocalDateTime)
            + LocalDateTime getEndTime()
            - void setEndTime(LocalDateTIme)
            + boolean canHaveAsEndTime(LocalTime)
            + overlaps(TimeSpan)
        }

        class Clock {
            - time : LocalDateTime
            + LocalDateTime getTime()
            + void updateTime(LocalDateTime)
        }

        class TimeParser {
            {static} - DATE_TIME_FORMATTER : DateTimeFormatter
            {static} - DATE_FORMATTER : DateTimeFormatter
            {static} + String convertLocalDateTimeToString(LocalDAteTime)
            {static} + LocalDateTimeconvertStringToLocalDateTime(String)
            {static} + String convertLocalTimeToString(LocalTime)
            {static} + LocalTime convertStringToLocalTime(String)
            {static} + LocalDateTime roundUpLocalDateTime(LocalDateTime)
            {static} + roundUpLocalTime()
        }

        class TimeSpan {
            - startTime : LocalDateTime
            - endTime : LocalDateTime
            + TimeSpan(LocalDateTime, LocalDAteTime)
            + LocalDateTime getStartTime()
            - void setStartTime(LocalDateTIme)
            + LocalDateTime getEndTime()
            - void setEndTime(LocalDateTime)
            + boolean canHaveAsEndTime(LocalDateTime)
            + boolean equals(TimeSpan)
        }
      }

      package taskman.backend.user {
        class Developer {
            + Developer(String, String)
            + String getUserType()
        }

        class OperationNotPermittedException {
            + OperationNotPermittedException(String)
        }

        class Manager {
            + Manager(String, String)
            + String getUserType()
        }

        abstract class User {
            - name : String
            - password : String
            + User(String, String)
            + String getName()
            - void setName(String)
            + String getPassword()
            - void setPassword(String)
            {abstract} + String getUserType()
        }

        class UserManager {
            - users : List<User>
            + UserManager()
            + List<User> getUsers()
            + User getUser(String)
            + boolean hasUser(String)
            + void createUser(String, String, String, LocalTime, ResourceManager)
            - void createDeveloper(String, String)
            - void createManager(String, String)
            + void removeUser(User, String, ResourceManager, )
            + Collection<String> getUserTypes()
            + User getCurrentUser()
            - void setCurrentUser(User)
            + boolean hasCurrentUser()
            + void login(String, String)
            + void logout()
        }
      }
    }
  }

  package taskman.backend.branchoffice {
    class BranchOffice {
      - projectManager: ProjectManager
      - userManager: UserManager
      - resourceManager: ResourceManager
      - name: String
      + BranchOffice(String)
      + ProjectManager getProjectManager()
      + ResourceManager getResourceManager()
      + UserManager getUserManager()
      - void setProjectmanager(ProjectManager)
      - void setResourceManager(ResourceManager)
      - void setUserManager(UserManager) 
      + Task executeDelegation(Map<ResourceType, Integer>, String, String, LocalDateTime, long, double)
    }

    class BranchOfficeManager {
      - branchOffices: List<BranchOffice>
      - currentBranchOffice: BranchOffice
      + branchOfficeManager()
      - void addBranchOffice(BranchOffice)
      + void changeBranchOffice(BranchOffice)
      + void createBranchOffice(String)
      + List<BranchOffice> getBranchOffices()
      + BranchOffice getCurrentBranchOffice()
      - void setCurrentBranchOffice(BranchOffice)
      + void deactivateBranchOffice()
    }
  }

  Smaller -up-|> Constraint
  Smaller o-- Amount : amount1
  Smaller o-- Amount : amount2
  Equals -up-|> Constraint
  Equals o-- Amount : amount1
  Equals o-- Amount : amount2
  Not -up-|> Constraint
  Not o-- Constraint : constraint
  Or -up-|> Constraint
  Or o-- Constraint : constraint1
  Or o-- Constraint : constraint2
  Constant -up-|> Amount
  Minus -up-|> Amount
  Minus o-- Amount: amount1
  Minus o-- Amount: amount2
  Plus -up-|> Amount
  Plus o-- Amount: amount1
  Plus o-- Amount: amount2
  Type -up-|> Amount
  Type o-- ResourceType: resourceType
  Controller o-- ConstraintParser 
  ConstraintParser o-- Constraint 
  ConstraintParser o-- Amount 
  UserInterface o-- Controller : controller
  FormSection -up-|> Section
  MenuSection -up-|> Section
  SelectionSection -up-|> Section
  TextSection -up-|> Section
  TitleSection -up-|> Section
  TitleSection o-- TextSection : textSection
  Controller o-- Clock : clock
  Controller o-- BranchOfficeManager: branchOfficeManager
  BranchOffice o-- UserManager : userManager
  BranchOffice o-- ProjectManager : projectManager
  BranchOffice o-- ResourceManager : resourceManager
  BranchOfficeManager o-- BranchOffice
  Controller o-- SimulationManager : simulationManager
  XmlObject o-- ResourceManager : resourceManager
  XmlObject o-- UserManager : userManager
  XmlObject o-- ProjectManager : projectManager
  XmlObject o-- Clock : clock
  Project -up-|> ProjectWrapper
  DeveloperResource -up-|> Resource
  DeveloperResource o-- AvailabilityPeriod : breakTime
  DeveloperResource *-- Developer : developer
  Reservation o-- Resource : resource
  Reservation o-- TimeSpan : timeSpan
  Resource -up-|> ResourceWrapper
  Resource o-- ResourceType : type
  ResourceType -up-|> ResourceTypeWrapper
  Task -up-|> TaskWrapper
  DelegatedTask -up-|> Task
  Task o-- TimeSpan : timeSpan
  Task *-- TaskState : state
  Task o-- Task : alternative
  Task *-- Plan : plan
  TaskStateExecuting -up-|> TaskState
  TaskStateDelegated -up-|> TaskState
  TaskStateDelegated o-- Task: delegatedTask
  TaskStateFailed -up-|> TaskState
  TaskStateFinished -up-|> TaskState
  TaskStatePlanned -up-|> TaskState
  TaskStateUnavailable -up-|> TaskState
  AvailabilityPeriod -up-|> AvailabilityPeriodWrapper
  TimeSpan -up-|> TimeSpanWrapper
  Developer -up-|> User
  Manager -up-|> User
  User -up-|> UserWrapper
  UserManager o-- User : currentUser
  UserManager o-- User : Users
  Controller o-- TimeParser 

@enduml