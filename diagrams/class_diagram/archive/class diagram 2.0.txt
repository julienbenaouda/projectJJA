@startuml

note "In the presentation a simplified diagram is expected." as Note1

class UI {

- Controller controller

+ {static} void main(String[] args)
# UI()
+ void addAlternative(String projectName)
+ void addDependency(String projectName)
+ void advanceSystemTime()
+ void createProject
+ void createTask(String projectName) 
+ void exportFile()
- HashMap<String, String> FillInTaskUpdateForm()
# Controller getController()
+ void importFile()
+ int inputInt()
+ String inputString()
+ void listProjects()
+ void print(String text)
+ void showAvailableTasks(String projectName)
+ void ShowMainMenu()
+ void ShowProjectDetails(String projectName)
+ void showProjectMenu()
+ void showProjectMenu(String projectName)
+ void showSystemTime()
+ void showTaskDetails(String projectName)
+ void showUserChoiceDialog()
+ void updateTaskStatus(String projectName)
+ void welcomeDialog()
}

UI o-- Controller

class Controller {

- Clock clock
- HashMap<String, String> projects
+ Controller()
+ Controller(String initialTime)
+ Controller(String initialTime, String initialUserType)
- Controller(HashMap<String, Project> projects, Clock clock)

+ List<String> getProjectNames()
+ HashMap<String, String> getProjectDetails(String projectName)
+ void addProject(HashMap<String, String> form)
+ void addProject(String name, Project project)

+ List<Integer> getTasksOfProject(String projectName)
+ HashMap<String, String> getTaskDetails(String projectName, Integer taskId)
+ ArrayList<HashMap<String, String>> getAvailableTasks(String projectName)
+ String getDelay(String projectName, int taskID)
+ int getLastTaskID()
+ Project getProject(String projectName)
+ HashMap<String, String> getProjectCreationForm()
+ HashMap<String, String> getTaskCreationForm()
+ HashMap<String, String> getUpdateTaskStatusForm()
+ list<Integer> getTasksOfProject(String projectName)

+ void addTask(String projectName, HashMap<String, String> form)
+ void addAlternativeToTask(String projectName, Integer taskId, Integer alternativeTaskId)
+ void addDependencyToTask(String projectName, Integer tastId, Integer dependencyTaskId)
+ void updateTaskStatus(String projectName, Integer taskId, HashMap<String, String> form)
+ boolean projectExists(String projectName)

+ String getUserType()
+ void setUserType(String type)

+ String getSystemTime()
+ void updateSystemTime(String timestamp)

+ void ExportToXML(String path)
+ [static] void importFromXML(String path)
}

Controller o-- User
Controller o-- Clock
Controller o-- Project
Controller o-- Task

class User {
- {static} UserType user
+ {static} boolean canChangeTaskStatus()
+ {static} void setUserType(String type)
+ {static} String getUserType()
+ {static} boolean canChangeTaskStatus()
+ {static} void addToXml(XmlObject object)
+ {static} void setFromXml(xmlObject object)

}

User o-- UserType

enum UserType {
REGULARUSER
DEVELOPER

+ {static} UserType fromUserType(String type)
+ {static} String toString()
}

class Clock {
- {static} LocalDateTime systemTime
- {static} void setSystemTime(LocalDateTime systemTime)

+ Clock(LocalDateTime timestamp)

+ {static} LocalDateTime getSystemTime()
+ {static} void updateSystemTime(LocalDateTime timestamp)

+ {static} void addToXml()
+ {static} void GetFromXml(XmlObject xml)
}

class Project {

- String name
- String description
- LocalDateTime creationTime
- LocalDateTime dueTime
- List<Task> tasks

+ Project(String name, String description, String creationTime, String dueTime)

- List<Task> getTasks()
- void setName(String name)
- void setDescription(String description)
- void setCreationTime(StringcreationTime)
- void setDueTime(StringdueTime)
+ void addTask(Task task)
+ void removeTask(Task task)

+ String getName()
+ String getDescription()
+ String getCreationTime()
+ String getDueTime()
+ HashMap<String, String> getProjectDetails()

+ ArrayList<Integer> getTaskIds()
+ HashMap<String, String> getTaskDetails(Integer taskId)

+ Element saveToString()
+ {static} Project restoreFromString(Element xml)

}

note right of Project : Status and total execution time \n of the project should be calculated!

Project *-- Task

class Task {

- {static} Integer lastTaskId
- Integer Id
- String description
- Duration estimatedDuration
- Double acceptableDeviation
- LocalDateTime startTime
- LocalDateTime endTime
- Status status
- List<Task> dependencies
- Task alternative

+ Task(String description, String estimatedDuration, Double acceptableDeviation, String startTime, String endTime)

- {static} Integer getLastTaskId()
- void setId(Integer id)
- void setDescription(String description)
- void setEstimatedDuration(String duration)
- void setAcceptableDeviation(Double acceptableDeviation)
- void setStartTime(String startTime)
- void setEndTime(String endTime)

+ Integer getId()
+ String getDescription()
+ String getEstimatedDuration()
+ Double getAcceptableDeviation()
+ String getStartTime()
+ String getEndTime()
+ Status getStatus()
+ List<Task> getDependencies()
+ Task getAlternative()
+ HashMap<String, String> getTaskDetails()
+ void updateStatus(LocalDateTime startTime, LocalDateTime endTime, Status status)
+ void addDependency(Task dependency)
+ void removeDependency(Task dependency)
+ void setAlternative(Task alternative)

+ Element saveToString()
+ {static} Task restoreFromString(Element xml)

}

note bottom of Task : No loops are allowed \n in the dependency graph!
note left of Task : If tasks depend on each other, \n timespans cannot overlap!
note right of Task : The timestamps are expressed \n in hours and minutes, no seconds!

Task o-- Status

enum Status {
AVAILABLE
UNAVAILABLE
FINISHED
FAILED

+ Boolean isFinalState()

+ String saveToString()
+ void restoreFromString(String status)
}

@enduml
