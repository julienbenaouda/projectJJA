@startuml

note "In the presentation a simplified diagram is expected." as Note1

class UserInterface {

- Controller controller

+ {static} void main()

}

UserInterface o-- Controller

class Controller {

- UserController userController
- ProjectController projectController
- Clock clock

+ Controller(LocalDateTime timestamp)

- UserController getUserController()
- ProjectController getProjectController()
- Clock getClock()
- void setUserController(UserController userController)
- void setProjectController(ProjectController projectController)
- void setClock(Clock clock)

+ String getCurrentUserName()
+ void addUser(String username, String password, Boolean isDeveloper)
+ void login(String username, String password)
+ void logout()

+ ArrayList<String> getProjectNames()
+ HashMap<String, String> getProjectDetails(String projectName)
+ void addProject(String name, String description, LocalDateTime dueTime)

+ ArrayList<Integer> getTasksOfProject(String projectName)
+ HashMap<String, String> getTaskDetails(String projectName, Integer taskId)
+ void addTaskToProject(String projectName, String description, Duration estimatedDuration, Double acceptableDeviation, LocalDateTime startTime)
+ void addAlternativeToTask(Integer taskId, Integer alternativeTaskId)
+ void addDependencyToTask(Integer tastId, Integer dependencyTaskId)
+ void updateTaskStatus(String projectName, Integer taskId, LocalDateTime startTime, LocalDateTime endTime, Status status)

+ LocalDateTime getSystemTime()
+ void updateSystemTime(LocalDateTime timestamp)

+ void saveToFile(String path)
+ void restoreFromFile(String path)

}

Controller o-- Clock
Controller o-- ProjectController
Controller o-- UserController

class Clock {

- LocalDateTime systemTime

+ Clock(LocalDateTime timestamp)

- void setSystemTime(LocalDateTime systemTime)

+ LocalDateTime getSystemTime()
+ void updateSystemTime(LocalDateTime timestamp)

+ String saveToString()
+ void restoreFromString(String status)

}

class UserController {

- User currentUser
- ArrayList<User> users

+ UserController()

- User getCurrentUser()
- ArrayList<User> getUsers()
- void addUser(User user)
- void removeUser(User user)

+ String getCurrentUserName()
+ void login(String username, String password)
+ void logout()
+ void addUser(String username, String password, Boolean isDeveloper)
+ Boolean userCanUpdateTaskStatus()

+ String saveToString()
+ void restoreFromString(String status)

}

UserController o-- User

class User {

- String username
- String password
- Boolean isDeveloper

+ User(String username, String password, Boolean isDeveloper)

- void setUsername(String username)
- String getPassword()
- void setPassword(String password)
- Boolean isDeveloper()
- void setIsDeveloper(Boolean flag)

+ String getUsername()
+ Boolean verifyPassword(String password)
+ Boolean canUpdateTaskStatus()

+ String saveToString()
+ void restoreFromString(String status)

}

note bottom of User : Is a developer also a regular user?

class ProjectController {

- ArrayList<Project> projects

+ ProjectController()

- void addProject(Project project)
- void removeProject(Project project)

+ ArrayList<String> getProjectNames()
+ HashMap<String, String> getProjectDetails(String projectName)
+ void addProject(String name, String description, LocalDateTime dueTime)

+ ArrayList<Integer> getTasksOfProject(String projectName)
+ HashMap<String, String> getTaskDetails(String projectName, Integer taskId)
+ void addTaskToProject(String projectName, String description, Duration estimatedDuration, Double acceptableDeviation, LocalDateTime startTime)
+ void addAlternativeToTask(Integer taskId, Integer alternativeTaskId)
+ void addDependencyToTask(Integer tastId, Integer dependencyTaskId)
+ void updateTaskStatus(String projectName, Integer taskId, LocalDateTime startTime, LocalDateTime endTime, Status status)

+ String saveToString()
+ void restoreFromString(String status)

}

ProjectController o-- Project

class Project {

- String name
- String description
- LocalDateTime creationTime
- LocalDateTime dueTime
- ArrayList<Task> tasks

+ Project(String name, String description, LocalDateTime creationTime, LocalDateTime dueTime)

- ArrayList<Task> getTasks()
- void setName(String name)
- void setDescription(String description)
- void setCreationTime(LocalDateTime creationTime)
- void setDueTime(LocalDateTime dueTime)
- void addTask(Task task)
- void removeTask(Task task)

+ String getName()
+ String getDescription()
+ LocalDateTime getCreationTime()
+ LocalDateTime getDueTime()
+ HashMap<String, String> getProjectDetails()
+ Duration getTotal

+ ArrayList<Integer> getTaskIds()
+ HashMap<String, String> getTaskDetails(Integer taskId)
+ void addTask(String description, Duration estimatedDuration, Double acceptableDeviation, LocalDateTime startTime)
+ void addAlternativeToTask(Integer tastId, Integer alternativeTaskId)
+ void addDependencyToTask(Integer tastId, Integer dependencyTaskId)
+ void updateTaskStatus(Integer taskId, LocalDateTime startTime, LocalDateTime endTime, Status status)

+ String saveToString()
+ void restoreFromString(String status)

}

note left of Project : Status and total execution time \n of the project should be calculated!

Project *-- Task

class Task {

- {static} Integer lastTaskId
- Integer Id
- String description
- Duration estimatedDuration
- Double acceptableDeviation
- LocalDateTime startTime
- LocalDateTime endTime
- Status status
- ArrayList<Task> dependencies
- Task alternative

+ Task(String description, Duration estimatedDuration, Double acceptableDeviation, LocalDateTime startTime, LocalDateTime endTime)

- {static} Integer getLastTaskId()
- void setId(Integer id)
- void setDescription(String description)
- void setEstimatedDuration(Duration duration)
- void setAcceptableDeviation(Double acceptableDeviation)
- void setStartTime(LocalDateTime startTime)
- void setEndTime(LocalDateTime endTime)

+ Integer getId()
+ String getDescription()
+ Duration getEstimatedDuration()
+ Double getAcceptableDeviation()
+ LocalDateTime getStartTime()
+ LocalDateTime getEndTime()
+ Status getStatus()
+ ArrayList<Task> getDependencies()
+ Task getAlternative()
+ Boolean hasAlternative()
+ HashMap<String, String> getTaskDetails()
+ void updateStatus(LocalDateTime startTime, LocalDateTime endTime, Status status)
+ void addDependency(Task dependency)
+ void removeDependency(Task dependency)
+ void setAlternative(Task alternative)

+ String saveToString()
+ void restoreFromString(String status)

}

note bottom of Task : No loops are allowed \n in the dependency graph!
note left of Task : If tasks depend on each other, \n timespans cannot overlap!
note right of Task : The timestamps are expressed \n in hours and minutes, no seconds!

Task o-- Status

enum Status {

AVAILABLE
UNAVAILABLE
FINISHED
FAILED

+ Boolean isFinalState()

+ String saveToString()
+ void restoreFromString(String status)

}

@enduml